buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

subprojects {
    repositories {
        maven {
            name 'LDTTeam - Modding'
            url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        }
        flatDir {
            dirs 'libs'
        }
    }
}

project (':JVoxerlizer - Api') {
}

project (':launcher:forge:JVoxelizer - Launchers - Forge - 1.12') {
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'idea'

    repositories {
        maven {
            name 'LDTTeam - Modding'
            url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        }
        flatDir {
            dirs 'libs'
        }
    }

    version = System.getenv("Version")
    group = "com.ldtteam"
    archivesBaseName = "JVoxelizer - Launcher"

    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    minecraft {
        version = minecraft_version + "-" + forge_version
        runDir = "run"

        mappings = "snapshot_20171003"
    }

    configurations.forgeGradleUserDevPackage {
        resolutionStrategy {
            force 'net.minecraftforge:forge:1.12.2-14.23.5.2815:userdev'
        }
    }

    dependencies {
        compile project(':JVoxerlizer - Api')
    }

    processResources {
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            expand 'version':project.version, 'mcversion':project.minecraft.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }

}

task setupCiWorkspace {
    group 'build setup'
    description 'Sets up the build environment for the CI/CD Platform'

    subprojects.each {
        if (it.tasks.findByName("setupCiWorkspace") != null)
        {
            println "Detected ci workspace setup infrastructure on: ${it.name}"
            dependsOn("${it.path}:setupCiWorkspace" )
        }
    }
}