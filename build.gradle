import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.6'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}



allprojects { project ->
    repositories {
        maven {
            name 'LDTTeam - Modding'
            url 'https://ldtteam.jfrog.io/ldtteam/modding/'
        }
        maven {
            name 'Minecraft'
            url 'https://libraries.minecraft.net/'
        }
    }

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    model {
        components {
            java {
                addArtifact sourcesJar
                addArtifact javadocJar
            }
        }
    }

    group = "com.ldtteam.jvoxelizer"
    version = (System.getenv().containsKey("Version") ? System.getenv().get("Version") : "borked")
    archivesBaseName = "jvoxelizer-$project.name"
    
    //Setup for which java version we are compiling
    //Minecraft defaults to 1.8, anything higher does currently not work with Forge.
    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    //Setup the compiler to output all information we need.
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint"
    }

    //Create a sources jar.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        from sourceSets.test.allSource
    }

    //Create a javadoc jar.
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    //The primary jar needs to have a javadoc jar build
    //Ensures it is created and ready to upload.
    jar {
        dependsOn tasks.javadocJar
        dependsOn tasks.sourcesJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId ("jvoxelizer-$project.name").toString()
                
                from components.java
                artifact javadocJar
                artifact sourcesJar

                pom {
                    name = ("jvoxelizer-$project.name").toString()
                    url = 'https://github.com/ldtteam/JVoxelizer'
                    licenses {
                        license {
                            name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'OrionDevelopment'
                            name = 'Marc Hermans'
                            email = 'oriondevelopment@outlook.com'
                        }
                    }
                    contributors {
                        contributor {
                            id = 'ldtteam'
                            name = 'Let\'s Develop Together - Team'
                            email = 'info@ldtteam.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/ldtteam/jvoxelizer.git'
                        developerConnection = 'scm:git:ssh://github.com/ldtteam/jvoxelizer.git'
                        url = 'https://github.com/ldtteam/JVoxelizer'
                    }
                }

                //Replace all deobf dependencies with normal jar references.
                pom.withXml { xmlProvider ->
                    final Element document = xmlProvider.asElement()
                    final NodeList groupIdNodes = document.getElementsByTagName("groupId")
                    groupIdNodes.each { groupIdNodeObject ->
                        final Node groupIdNode = (Node) groupIdNodeObject
                        final String groupId = groupIdNode.getFirstChild().getTextContent().trim()
                        groupIdNode.setTextContent(groupId.replace("deobf.", ""))
                    }
                }
            }
        }
    }

    artifactory {
        publish {
            defaults {
                publications('maven')
                publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
                publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
                publishPom = true   //Publish generated POM files to Artifactory (true by default).
            }
        }
    }
    
    task wrapper(type: Wrapper) {
        gradleVersion = '4.9'
    }
}


    